// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5112.Robot2016;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5112.Robot2016.commands.*;
import org.usfirst.frc5112.Robot2016.commands.auto.AutoMoat;
import org.usfirst.frc5112.Robot2016.commands.auto.AutoRamparts;
import org.usfirst.frc5112.Robot2016.commands.auto.AutoRockWall;
import org.usfirst.frc5112.Robot2016.commands.auto.AutoRoughTerrain;
import org.usfirst.frc5112.Robot2016.commands.auto.SpyBotAuto;
import org.usfirst.frc5112.Robot2016.subsystems.*;

import com.thegongoliers.input.RoboRIOAccelerometer;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;

	public static OI oi;
	public static DriveTrain driveTrain;
	public static Arm obstacleMover;
	public static Intake intake;
	public static CameraSubsystem camera;
	public static Shooter shooter;
	public static Kicker kicker;
	public static PowerDistributionPanel pdp;
	public static AnalogGyro gyro;
	public static RoboRIOAccelerometer accel;
	public static boolean auto = false;

	private SendableChooser autoChooser;

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		driveTrain = new DriveTrain();
		obstacleMover = new Arm();
		intake = new Intake();
		camera = new CameraSubsystem();
		shooter = new Shooter();
		kicker = new Kicker();
		pdp = RobotMap.pdp;
		gyro = RobotMap.gyro;
		accel = new RoboRIOAccelerometer();
		autoChooser = new SendableChooser();
		autoChooser.addDefault("Do Nothing", new StopDriveTrain());
		autoChooser.addObject("Moat", new AutoMoat());
		autoChooser.addObject("Ramparts", new AutoRamparts());
		autoChooser.addObject("Rock Wall", new AutoRockWall());
		autoChooser.addObject("Rough Terrain", new AutoRoughTerrain());
		autoChooser.addObject("Reach Defense", new ReachDefense());
		autoChooser.addObject("Spy Bot High Goal", new SpyBotAuto());
		SmartDashboard.putData("Autonomous Chooser", autoChooser);
		gyro.calibrate();
		oi = new OI();

	}

	public static int getFieldPosition() {
		// return (Integer) fieldPosition.getSelected();
		return 0;
	}

	public static boolean shouldFire() {
		return RobotMap.autonomousFireLimitSwitch.get();
	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {

	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		// schedule the autonomous command (example)
		auto = true;
		autonomousCommand = (Command) autoChooser.getSelected();

		if (autonomousCommand != null)
			autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		auto = true;
		Scheduler.getInstance().run();
	}

	public void teleopInit() {
		auto = false;
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		auto = false;
		Scheduler.getInstance().run();
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}
